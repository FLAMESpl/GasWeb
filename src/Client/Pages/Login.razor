@page "/login"
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@using GasWeb.Shared.Authentication;
@using GasWeb.Shared.Users;

<h1>Login</h1>

@if (ShowErrors)
{
    <div class="alert alert-danger" role="alert">
        <p>@Error</p>
    </div>
}

@if (ShowRegistrationForm)
{
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Please enter your details</h5>
            <EditForm Model="registerModel" OnValidSubmit="HandleRegistration">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="username">Username</label>
                    <InputText Id="username" Class="form-control" @bind-Value="@registerModel.Username" />
                    <ValidationMessage For="@(() => registerModel.Username)" />
                </div>
                <button type="submit" class="btn btn-primary">Submit</button>
            </EditForm>
        </div>
    </div>
}

@code {

    private RegisterModel registerModel = new RegisterModel { Role = UserRole.Admin };
    private bool ShowErrors;
    private bool ShowRegistrationForm;
    private string Error = "";

    protected override async Task OnInitializedAsync()
    {
        ShowErrors = false;
        ShowRegistrationForm = false;

        var result = await AuthService.Login();

        if (result.Successful)
        {
            NavigationManager.NavigateTo("/");
        }
        else if (result.Error == AuthenticationErrorCodes.NotRegistered)
        {
            registerModel.Username = result.ExternalUsername ?? String.Empty;
            ShowRegistrationForm = true;
        }
        else
        {
            ShowErrors = true;
            Error = "Błąd uwierzytelniania przez zewnętrznego dostawce.";
        }
    }

    private async Task HandleRegistration()
    {
        var result = await AuthService.Register(registerModel);

        if (result.Successful)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            ShowErrors = true;
            Error = result.Error;
        }
    }
}
