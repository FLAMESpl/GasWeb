@page "/gas-stations/{GasStationId:long}"
@using GasWeb.Shared
@using GasWeb.Shared.GasStations
@using GasWeb.Shared.Franchises
@using GasWeb.Shared.PriceSubmissions
@inject GasWebClient Client

@if (initialized)
{
    <h1><u>@gasStation.Name</u></h1>

        <div class="card-body">
            @if (franchise != null)
            {
                <p>@franchise.Name</p>
            }

            <p>
                @gasStation.AddressLine1
                @gasStation.AddressLine2
            </p>
            <p>Utworzono przez @userNames[gasStation.CreatedByUserId]</p>
            <p>Ostation modyfikowano @priceSubmissions.Select(x => x.ModifiedAt).Append(gasStation.LastModifiedAt).Max()</p>
        </div>

        <div class="card-body">
            @if (franchise?.WholesalePrices?.Any() ?? false)
            {
                <h2>Ceny hurtowe</h2>

                <table class="table">
                    <thead>
                        <tr>
                            <th>Rodzaj</th>
                            <th>Cena</th>
                            <th>Ostatnia aktualizacja</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var price in franchise.WholesalePrices)
                        {
                            <tr>
                                <td>@price.FuelType.ToDisplayName()</td>
                                <td>@price.Amount.ToDisplayAmount()</td>
                                <td>@price.ModifiedAt</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>

    <EditForm Model="@submitPriceModel" OnValidSubmit="@HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="card">
            <div class="card-body form-horizontal">
                <div class="form-group">
                    <label for="fuelType">Rodzaj paliwa</label>
                    <InputSelect Id="fuelType" Class="form-control" @bind-Value="@submitPriceModel.FuelType">
                        <option value="@FuelType.Petrol">Benzyna</option>
                        <option value="@FuelType.Diesel">Diesel</option>
                        <option value="@FuelType.Gas">Gaz</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => submitPriceModel.FuelType)" />
                </div>

                <div class="form-group">
                    <label for="amount">Cena</label>
                    <InputNumber Id="amount" Class="form-control" @bind-Value="@submitPriceModel.Amount" />
                    <ValidationMessage For="@(() => submitPriceModel.Amount)" />
                </div>

                <div class="form-group">
                    <button type="submit" class="btn btn-primary">Wyślij</button>
                </div>
            </div>
        </div>
    </EditForm>

    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Rodzaj paliwa</th>
                <th>Cena</th>
                <th>Utworzono przez</th>
                <th>Data dodania</th>
            </tr>
            <tr>
                <th></th>
                <th>
                    <select Id="fuelType" @onchange="HandleRefresh" Class="form-control">
                        <option value="@((int)FuelType.All)">Wszystkie</option>
                        <option value="@((int)FuelType.Petrol)">Benzyna</option>
                        <option value="@((int)FuelType.Diesel)">Diesel</option>
                        <option value="@((int)FuelType.Gas)">Gaz</option>
                    </select>
                </th>
                <th></th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (!refreshing)
            {
                @foreach (var priceSubmission in priceSubmissions)
                {
                    <tr>
                        <td>@priceSubmission.Id</td>
                        <td>@priceSubmission.FuelType.ToDisplayName()</td>
                        <td>@priceSubmission.Amount.ToDisplayAmount()</td>
                        <td>@userNames[priceSubmission.CreatedByUserId]</td>
                        <td>@priceSubmission.ModifiedAt</td>
                    </tr>
                }
            }
        </tbody>
    </table>
}
else
{
    <p><em>Loading...</em></p>
}

<style>
    .form-horizontal {
        display: flex;
        align-items: flex-end;
    }

        .form-horizontal *.form-group {
            margin: 4px
        }
</style>

@code {
    [Parameter] public long GasStationId { get; set; }

    GasStation gasStation;
    Franchise franchise;
    IReadOnlyCollection<PriceSubmission> priceSubmissions;
    Dictionary<long, string> userNames;
    bool initialized = false;
    bool refreshing = false;
    SubmitPriceModel submitPriceModel;
    FuelType fuelTypes = FuelType.All;

    protected override async Task OnInitializedAsync()
    {
        var gasStationTask = Client.GasStations.Get(GasStationId);
        var priceSubmissionsTask = Client.PriceSubmissions.GetAllPages(new { GasStationId });
        var usersTask = Client.Users.GetList();

        await Task.WhenAll(gasStationTask, priceSubmissionsTask, usersTask);

        gasStation = gasStationTask.Result;
        priceSubmissions = priceSubmissionsTask.Result;
        userNames = usersTask.Result.ToDictionary(x => x.Id, x => x.Name);

        if (gasStation.FranchiseId.HasValue)
            franchise = await Client.Franchises.Get(gasStation.FranchiseId.Value);

        submitPriceModel = new SubmitPriceModel { GasStationId = GasStationId, FuelType = FuelType.Petrol };

        initialized = true;
    }

    private async Task HandleRefresh(ChangeEventArgs eventArgs)
    {
        fuelTypes = (FuelType)int.Parse(eventArgs.Value.ToString());
        await Refresh();
    }

    private async Task HandleSubmit()
    {
        refreshing = true;
        await Client.PriceSubmissions.Create(submitPriceModel);
        await Refresh();
    }

    private async Task Refresh()
    {
        refreshing = true;

        Console.Write("Queried fuel type: ");
        Console.WriteLine(fuelTypes);

        var usersTask = Client.Users.GetList();
        var priceSubmissionsTask = Client.PriceSubmissions.GetAllPages(new { GasStationId, fuelTypes });

        await Task.WhenAll(priceSubmissionsTask, usersTask);

        userNames = usersTask.Result.ToDictionary(x => x.Id, x => x.Name);
        priceSubmissions = priceSubmissionsTask.Result;

        refreshing = false;
    }
}
