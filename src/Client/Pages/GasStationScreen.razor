@page "/gas-stations/{GasStationId:long}"
@using GasWeb.Shared
@using GasWeb.Shared.GasStations
@using GasWeb.Shared.Franchises
@using GasWeb.Shared.PriceSubmissions
@using GasWeb.Shared.Users
@inject GasWebClient Client

@if (initialized)
{
    <h1>@gasStation.Name</h1>
    @if (franchise != null)
    {
        <p>@franchise.Name</p>
    }
    <p>@gasStation.Location</p>
    <p>Utworzono przez @userNames[gasStation.CreatedByUserId]</p>
    <p>Ostation modyfikowano @priceSubmissions.Select(x => x.ModifiedAt).Append(gasStation.LastModifiedAt).Max()</p>

    @if (franchise?.WholesalePrices?.Any() ?? false)
    {
        <h2>Ceny hurtowe</h2>

        <table class="table">
            <thead>
                <tr>
                    <th>Rodzaj</th>
                    <th>Cena</th>
                    <th>Ostatnia aktualizacja</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var price in franchise.WholesalePrices)
                {
                    <tr>
                        <td>@price.FuelType.ToDisplayName()</td>
                        <td>@price.Amount</td>
                        <td>@price.ModifiedAt</td>
                    </tr>
                }
            </tbody>
        </table>
    }

    <div class="card">
        <div class="card-body">
            <EditForm Model="@submitPriceModel" OnValidSubmit="@HandleSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group form-horizontal">
                    <label for="fuelType">Rodzaj paliwa</label>
                    <InputSelect Id="fuelType" Class="form-control" @bind-Value="@submitPriceModel.FuelType">
                        <option value="@FuelType.Petrol">Benzyna</option>
                        <option value="@FuelType.Diesel">Diesel</option>
                        <option value="@FuelType.Gas">Gaz</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => submitPriceModel.FuelType)" />
                </div>

                <div class="form-group form-horizontal">
                    <label for="amount">Cena</label>
                    <InputNumber Id="amount" Class="form-control" @bind-Value="@submitPriceModel.Amount" />
                    <ValidationMessage For="@(() => submitPriceModel.Amount)" />
                </div>

                <div class="form-group form-horizontal">
                    <button type="submit" class="btn btn-primary">Wyślij</button>
                </div>
            </EditForm>
        </div>
    </div>

    if (refreshing)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <EditForm Model="@getPriceSubmissions" OnValidSubmit="@HandleRefresh">
            <div class="card">
                <div class="card-body" style="display:flex; align-items:flex-end">
                    <div class="form-group" style="margin: 4px">
                        <label for="fuelType">Rodzaj paliwa</label>
                        <InputSelect Id="fuelType" Class="form-control" @bind-Value="@getPriceSubmissions.FuelTypes">
                            <option value="@FuelType.All">Wszystkie</option>
                            <option value="@FuelType.Petrol">Benzyna</option>
                            <option value="@FuelType.Diesel">Diesel</option>
                            <option value="@FuelType.Gas">Gaz</option>
                        </InputSelect>
                    </div>
                    <div class="form-group" style="margin: 4px">
                        <button type="submit" class="btn btn-primary">Odśwież</button>
                    </div>
                </div>
            </div>
        </EditForm>

        <table class="table">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Rodzaj paliwa</th>
                    <th>Cena</th>
                    <th>Utworzono przez</th>
                    <th>Data dodania</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var priceSubmission in priceSubmissions)
                {
                    <tr>
                        <td>@priceSubmission.Id</td>
                        <td>@priceSubmission.FuelType.ToDisplayName()</td>
                        <td>@priceSubmission.Amount</td>
                        <td>@userNames[priceSubmission.CreatedByUserId]</td>
                        <td>@priceSubmission.ModifiedAt</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}
else
{
    <p><em>Loading...</em></p>
}

<style>
    .form-horizontal {
        float: left;
        margin: 4px;
    }
</style>

@code {
    [Parameter] public long GasStationId { get; set; }

    GasStation gasStation;
    Franchise franchise;
    IReadOnlyCollection<PriceSubmission> priceSubmissions;
    Dictionary<long, string> userNames;
    bool initialized = false;
    bool refreshing = false;
    SubmitPriceModel submitPriceModel;
    GetPriceSubmissions getPriceSubmissions;

    protected override async Task OnInitializedAsync()
    {
        var gasStationTask = Client.GasStations.Get(GasStationId);
        var priceSubmissionsTask = Client.PriceSubmissions.GetAllPages(new { GasStationId });
        var usersTask = Client.Users.GetList();

        await Task.WhenAll(gasStationTask, priceSubmissionsTask, usersTask);

        gasStation = gasStationTask.Result;
        priceSubmissions = priceSubmissionsTask.Result;
        userNames = usersTask.Result.ToDictionary(x => x.Id, x => x.Name);

        if (gasStation.FranchiseId.HasValue)
            franchise = await Client.Franchises.Get(gasStation.FranchiseId.Value);

        submitPriceModel = new SubmitPriceModel { GasStationId = GasStationId, FuelType = FuelType.Petrol };
        getPriceSubmissions = new GetPriceSubmissions { FuelTypes = FuelType.All };

        initialized = true;
    }

    private async Task HandleRefresh()
    {
        refreshing = true;

        Console.Write("Queried fuel type: ");
        Console.WriteLine(getPriceSubmissions.FuelTypes);

        var usersTask = Client.Users.GetList();
        var priceSubmissionsTask = Client.PriceSubmissions.GetAllPages(new { GasStationId, getPriceSubmissions.FuelTypes });

        await Task.WhenAll(priceSubmissionsTask, usersTask);

        userNames = usersTask.Result.ToDictionary(x => x.Id, x => x.Name);
        priceSubmissions = priceSubmissionsTask.Result;

        refreshing = false;
    }

    private async Task HandleSubmit()
    {
        refreshing = true;
        await Client.PriceSubmissions.Create(submitPriceModel);
        await HandleRefresh();
    }
}
