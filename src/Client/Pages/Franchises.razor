@page "/franchises"
@using GasWeb.Shared
@using GasWeb.Shared.Franchises
@using GasWeb.Shared.Users
@inject GasWebClient Client
@inject NavigationManager NavigationManager

<h1>Franczyzny</h1>

<ErrorDisplay Errors="errors">

    @if (!initialized)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="card">
            <div class="card-body">
                @if (expandEditForm)
                {
                    <EditForm Model="@addFranchiseModel" OnValidSubmit="@HandleAddFranchise">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group form-horizontal">
                            <label for="name">Nazwa</label>
                            <InputText Id="name" Class="form-control" @bind-Value="@addFranchiseModel.Name" />
                            <ValidationMessage For="@(() => addFranchiseModel.Name)" />
                        </div>

                        <div class="form-group form-horizontal">
                            <button type="submit" class="btn btn-primary">Zapisz</button>
                            <button class="btn btn-outline-secondary" @onclick="() => expandEditForm = false">Anuluj</button>
                        </div>

                    </EditForm>
                }
                else
                {
                    <button type="submit" class="btn btn-primary" @onclick="() => expandEditForm = true">Dodaj</button>
                }
            </div>
        </div>

        <table class="table">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Nazwa</th>
                    <th>Utworzono przez</th>
                    <th>Ostatnia modyfikacja</th>
                    <th>Hurt. cena Pb98</th>
                    <th>Hurt. cena Pb95</th>
                    <th>Hurt. cena ON</th>
                    <th>Hurt. cena ON Premium</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var franchise in franchises)
                {
                    <tr>
                        <td>@franchise.Id</td>
                        <td>@franchise.Name</td>
                        <td>@userNames[franchise.CreatedByUserId]</td>
                        <td>@franchise.ModifiedAt</td>
                        <td>@franchise.FindPrice(FuelType.Pb98)?.ToDisplayAmount()</td>
                        <td>@franchise.FindPrice(FuelType.Pb95)?.ToDisplayAmount()</td>
                        <td>@franchise.FindPrice(FuelType.Diesel)?.ToDisplayAmount()</td>
                        <td>@franchise.FindPrice(FuelType.DieselPremium)?.ToDisplayAmount()</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</ErrorDisplay>

<style>
    .hoverTable {
        width: 100%;
        border-collapse: collapse;
    }
        /* Define the hover highlight color for the table row */
        .hoverTable tbody tr:hover {
            background-color: #00e673;
        }
</style>

@code {
    bool expandEditForm = false;
    bool initialized = false;
    IReadOnlyCollection<string> errors;
    IReadOnlyCollection<Franchise> franchises;
    Dictionary<long, string> userNames;
    AddFranchiseModel addFranchiseModel = new AddFranchiseModel();

    protected override async Task OnInitializedAsync()
    {
        var usersResponse = await Client.Users.GetList();
        var franchiseResponse = await Client.Franchises.GetAllPages();

        var aggregated = AggregatedServerResult.From(usersResponse, franchiseResponse);
        errors = aggregated.Errors;

        if (aggregated.Successful)
        {
            userNames = usersResponse.Result.ToDictionary(x => x.Id, x => x.Name);
            franchises = franchiseResponse.Result;
        }

        initialized = true;
    }

    private async Task HandleAddFranchise()
    {
        franchises = null;
        expandEditForm = false;
        await Client.Franchises.Create(addFranchiseModel);
        addFranchiseModel = new AddFranchiseModel();
        await OnInitializedAsync();
    }
}
