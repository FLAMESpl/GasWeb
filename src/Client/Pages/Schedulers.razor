@page "/schedulers"
@using GasWeb.Shared.Schedulers
@using System.Threading
@using ViewModels
@implements IDisposable
@inject GasWebClient Client
@inject NavigationManager NavigationManager

<h1>Planer zadań</h1>

<ErrorDisplay Errors="errors">
    @if (initialized)
    {
        <ErrorDisplay Errors="parseErrors" />
        <table class="table">
            <thead>
                <tr>
                    <th>Zadanie</th>
                    <th>Ostatnia modyfikacja</th>
                    <th style="text-align: center">Uruchomiony</th>
                    <th>Częstotliwość uruchomień</th>
                    <th>Następne uruchomienie</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var scheduler in schedulers)
                {
                    <tr>
                        <td>@GetSchedulerDescription(scheduler.Model)</td>
                        <td>@scheduler.Model.LastModifiedAt (@userNames[scheduler.Model.LastModifiedByUserId])</td>
                        <td>
                            <EditForm Model=model>
                                <InputCheckbox class="form-control" @bind-Value="scheduler.Started" @oninput="() => HandleStartStop(scheduler)"/>
                            </EditForm>
                        </td>
                        <td>
                            <EditForm Model="model">
                                <InputText class="form-control" @bind-Value="scheduler.Interval" @oninput="args => HandleIntervalChange(scheduler, args)" />
                            </EditForm>
                        </td>
                        <td>@schedulerNextTrigger[scheduler.Model.Id]</td>
                        <td>
                            <div>
                                <button type="submit" class="btn btn-primary" @onclick="() => HandleTrigger(scheduler.Model.Id)">Uruchom ręcznie</button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p><em>Loading...</em></p>
    }
</ErrorDisplay>

@code {
    IReadOnlyCollection<SchedulerViewModel> schedulers;
    Dictionary<long, DateTime?> schedulerNextTrigger;
    Dictionary<long, string> userNames;
    Dictionary<long, string> franchiseNames;
    bool initialized = false;
    IReadOnlyCollection<string> errors = Array.Empty<string>();
    IReadOnlyCollection<string> parseErrors = Array.Empty<string>();
    Timer timer;
    UpdateSchedulerModel model = new UpdateSchedulerModel();

    protected override async Task OnInitializedAsync()
    {
        var usersTask = Client.Users.GetList();
        var franchisesTask = Client.Franchises.GetAllPages();
        var schedulersTask = Client.Schedulers.GetAllPages();

        await Task.WhenAll(usersTask, franchisesTask, schedulersTask);

        var usersResponse = usersTask.Result;
        var franchiseResponse = franchisesTask.Result;
        var schedulersResponse = schedulersTask.Result;

        var aggregated = AggregatedServerResult.From(usersResponse, franchiseResponse, schedulersResponse);
        errors = aggregated.Errors;

        if (aggregated.Successful)
        {
            schedulers = schedulersResponse.Result.Select(x => new SchedulerViewModel(x)).ToList();
            userNames = usersResponse.Result.ToDictionary(x => x.Id, x => x.Name);
            franchiseNames = franchiseResponse.Result.ToDictionary(x => x.Id, x => x.Name);
            schedulerNextTrigger = schedulers.ToDictionary(x => x.Model.Id, CalculateNextTrigger);

            SchedulePageRefresh();
        }

        initialized = true;
    }

    private DateTime? CalculateNextTrigger(SchedulerViewModel scheduler)
    {
        if (scheduler.Model.StartedAt == null) return null;

        var durationFromStart = DateTime.UtcNow - scheduler.Model.StartedAt.Value;
        var triggerCount = durationFromStart.Ticks / scheduler.Model.Interval.Ticks;
        var nextTrigger = scheduler.Model.StartedAt.Value + TimeSpan.FromTicks((triggerCount + 1) * scheduler.Model.Interval.Ticks);
        return nextTrigger;
    }

    private async Task HandleStartStop(SchedulerViewModel scheduler)
    {
        var updateModel = new UpdateSchedulerModel
        {
            Interval = scheduler.Model.Interval,
            Running = !scheduler.Started
        };

        await Client.Schedulers.Update(scheduler.Model.Id, updateModel);
        var updated = await Client.Schedulers.Get(scheduler.Model.Id);
        scheduler.Model.StartedAt = updated.Result.StartedAt;
        schedulerNextTrigger[scheduler.Model.Id] = CalculateNextTrigger(scheduler);

        SchedulePageRefresh();
    }

    private async Task HandleIntervalChange(SchedulerViewModel scheduler, ChangeEventArgs args)
    {
        if (TimeSpan.TryParse(args.Value.ToString(), out var newTimeSpan))
        {
            if (newTimeSpan == scheduler.Model.Interval)
            {
                parseErrors = Array.Empty<string>();
                return;
            }

            var updateModel = new UpdateSchedulerModel
            {
                Interval = newTimeSpan,
                Running = scheduler.Started
            };

            var response = await Client.Schedulers.Update(scheduler.Model.Id, updateModel);
            if (response.Successful)
            {
                scheduler.Model.Interval = newTimeSpan;
                parseErrors = Array.Empty<string>();
            }
            else
            {
                parseErrors = response.Errors;
            }
        }
        else
        {
            parseErrors = new[] { "Zły format czasu" };
        }
    }

    private Task HandleTrigger(long id)
    {
        return Client.Schedulers.TriggerManually(id);
    }

    private string GetSchedulerDescription(Scheduler scheduler)
    {
        var franchiseName = franchiseNames[scheduler.FranchiseId];
        switch (scheduler.Type)
        {
            case SchedulerType.RefreshWholesalePrices: return $"Odśwież hurtowe ceny ({ franchiseName })";
            case SchedulerType.RefreshGasStations: return $"Odśwież listę stacji paliwowych ({ franchiseName })";
            default: return string.Empty;
        }
    }

    private void SchedulePageRefresh()
    {
        timer?.Dispose();

        if (schedulerNextTrigger.Any(x => x.Value != null))
        {
            timer = new Timer(_ =>
            {
                schedulerNextTrigger = schedulers.ToDictionary(x => x.Model.Id, CalculateNextTrigger);
                StateHasChanged();
                var dueTime = GetTimerDueTime();
                timer.Change(dueTime, dueTime);
            },
                null,
                GetTimerDueTime(),
                GetTimerDueTime());
        }
        else
        {
            timer = null;
        }
    }

    private TimeSpan GetTimerDueTime() =>
        schedulerNextTrigger.Where(x => x.Value != null).Min(x => x.Value.Value) - DateTime.UtcNow + TimeSpan.FromSeconds(1);

    public void Dispose()
    {
        timer?.Dispose();
    }
}
