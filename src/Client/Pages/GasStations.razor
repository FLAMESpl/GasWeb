@page "/gas-stations"
@using GasWeb.Shared.Dashboards.GasStations
@using GasWeb.Shared.GasStations
@using GasWeb.Client.Pages.ViewModels
@inject GasWebClient Client
@inject NavigationManager NavigationManager

<h1>Stacje benzynowe</h1>

<ErrorDisplay Errors="errors">

    @if (gasStations == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="card">
            <div class="card-body">
                @if (expandEditForm)
                {
                    <EditForm Model="@addGasStationViewModel" OnValidSubmit="@HandleAddGasStation">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group form-horizontal">
                            <label for="name">Nazwa</label>
                            <InputText Id="name" Class="form-control" @bind-Value="@addGasStationViewModel.Name" />
                            <ValidationMessage For="@(() => addGasStationViewModel.Name)" />
                        </div>

                        <div class="form-group form-horizontal">
                            <label for="franchise">Franczyzna</label>
                            <InputSelect Id="franchise" Class="form-control" @bind-Value="@addGasStationViewModel.Franchise">
                                <option></option>
                                @foreach (var name in franchiseNames.Values)
                                {
                                    <option>@name</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => addGasStationViewModel.Franchise)" />
                        </div>

                        <div class="form-group form-horizontal">
                            <label for="address1">Adres 1</label>
                            <InputText Id="address1" Class="form-control" @bind-Value="@addGasStationViewModel.AddressLine1" />
                            <ValidationMessage For="@(() => addGasStationViewModel.AddressLine1)" />
                        </div>

                        <div class="form-group form-horizontal">
                            <label for="address2">Adres 2</label>
                            <InputText Id="address2" Class="form-control" @bind-Value="@addGasStationViewModel.AddressLine1" />
                            <ValidationMessage For="@(() => addGasStationViewModel.AddressLine2)" />
                        </div>

                        <div class="form-group form-horizontal">
                            <button type="submit" class="btn btn-primary">Zapisz</button>
                            <button class="btn btn-outline-secondary" @onclick="() => expandEditForm = false">Anuluj</button>
                        </div>

                    </EditForm>
                }
                else
                {
                    <button type="submit" class="btn btn-primary" @onclick="() => expandEditForm = true">Dodaj</button>
                }
            </div>
        </div>

        <table class="hoverTable table">
            <thead>
                <tr>
                    <th>Nazwa</th>
                    <th>Franczyzna</th>
                    <th>Lokacja</th>
                    <th>Ceny użytkowników</th>
                    <th>Ceny hurtowe</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var vm in gasStations)
                {
                    <tr @onclick="() => NaviagateToGasStation(vm.Item.GasStation.Id)" style="cursor:pointer">
                        <td>@vm.Item.GasStation.Name</td>
                        <td>@vm.Item.FranchiseName</td>
                        <td>
                            <div>
                                <p>@vm.Item.GasStation.AddressLine1</p>
                                <p>@vm.Item.GasStation.AddressLine2</p>
                            </div>
                        </td>
                        <td>
                            <div>
                                <p>Benzyna: @vm.Item.MinimalSubmittedPrices.Petrol?.ToDisplayAmount() - @vm.Item.MaximalSubmittedPrices.Petrol?.ToDisplayAmount()</p>
                                <p>Diesel: @vm.Item.MinimalSubmittedPrices.Diesel?.ToDisplayAmount() - @vm.Item.MaximalSubmittedPrices.Diesel?.ToDisplayAmount()</p>
                            </div>
                        </td>
                        <td>
                            <div>
                                <p>Benzyna: @vm.Item.WholesalePrices.Petrol?.ToDisplayAmount()</p>
                                <p>Diesel: @vm.Item.WholesalePrices.Diesel?.ToDisplayAmount()</p>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

<style>
    .hoverTable {
        width: 100%;
        border-collapse: collapse;
    }
        /* Define the hover highlight color for the table row */
        .hoverTable tbody tr:hover {
            background-color: #00e673;
        }
</style>
</ErrorDisplay>

@code {
    IReadOnlyCollection<GasStationDashboardItemViewModel> gasStations;
    IReadOnlyCollection<string> errors;
    Dictionary<long, string> userNames;
    Dictionary<long, string> franchiseNames;
    bool expandEditForm = false;
    AddGasStationViewModel addGasStationViewModel = new AddGasStationViewModel();

    protected override async Task OnInitializedAsync()
    {
        var usersTask = Client.Users.GetList();
        var franchisesTask = Client.Franchises.GetAllPages();
        var gasStationsTask = Client.Dashboards.GetGasStations();

        await Task.WhenAll(usersTask, franchisesTask, gasStationsTask);

        var usersResponse = usersTask.Result;
        var franchiseResponse = franchisesTask.Result;
        var gasStationsResponse = gasStationsTask.Result;

        var aggregated = AggregatedServerResult.From(usersResponse, franchiseResponse, gasStationsResponse);
        errors = aggregated.Errors;

        if (aggregated.Successful)
        {
            gasStations = gasStationsResponse.Result
                .Select(x => new GasStationDashboardItemViewModel
                {
                    Expanded = false,
                    Item = x
                })
                .ToList();

            userNames = usersResponse.Result.ToDictionary(x => x.Id, x => x.Name);
            franchiseNames = franchiseResponse.Result.ToDictionary(x => x.Id, x => x.Name);
        }
    }

    private void NaviagateToGasStation(long gasStationId)
    {
        NavigationManager.NavigateTo($"/gas-stations/{gasStationId}");
    }

    private async Task HandleAddGasStation()
    {
        gasStations = null;
        expandEditForm = false;
        await Client.GasStations.Create(addGasStationViewModel.ToModel(franchiseNames));
        addGasStationViewModel = new AddGasStationViewModel();
        await OnInitializedAsync();
    }
}
